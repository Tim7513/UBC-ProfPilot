name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  # Linting and code quality checks
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Check code formatting
      run: echo "Code formatting check placeholder - integrate Prettier/ESLint here"

    - name: Security audit
      run: npm audit --audit-level=moderate

    - name: Dependency check
      run: npx depcheck

  # Unit and integration tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      # Add database service if needed for integration tests
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Wait for database
      run: |
        until pg_isready -h localhost -p 5432; do
          echo "Waiting for database..."
          sleep 2
        done

    - name: Run unit tests
      run: npm run test:unit
      env:
        CI: true
        NODE_ENV: test

    - name: Run API tests
      run: npm run test:api
      env:
        CI: true
        NODE_ENV: test

    - name: Run integration tests
      run: npm run test:integration
      env:
        CI: true
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          test-results/
          coverage/
        retention-days: 7

  # API tests with server
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start server in background
      run: npm start &
      env:
        NODE_ENV: test
        PORT: 3000

    - name: Wait for server to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

    - name: Run API tests
      run: npm run test:api
      env:
        CI: true
        API_BASE_URL: http://localhost:3000

    - name: Run security tests
      run: npm run test:security:api
      env:
        CI: true
        API_BASE_URL: http://localhost:3000

    - name: Upload API test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-test-results
        path: test-results/
        retention-days: 7

  # End-to-end tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: api-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Build application
      run: npm run build

    - name: Start server in background
      run: npm start &
      env:
        NODE_ENV: test
        PORT: 3000
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Wait for server to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

    - name: Run E2E tests (Desktop)
      run: npm run test:e2e
      env:
        CI: true
        BASE_URL: http://localhost:3000

    - name: Run E2E tests (Mobile)
      run: npm run test:mobile
      env:
        CI: true
        BASE_URL: http://localhost:3000

    - name: Run UI security tests
      run: npm run test:security:ui
      env:
        CI: true
        BASE_URL: http://localhost:3000

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          playwright-report/
          test-results/
        retention-days: 7

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start server in background
      run: npm start &
      env:
        NODE_ENV: test
        PORT: 3000

    - name: Wait for server to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

    - name: Install Artillery
      run: npm install -g artillery

    - name: Run performance tests
      run: npm run test:performance

    - name: Run Lighthouse performance audit
      run: |
        npm install -g lighthouse
        lighthouse http://localhost:3000/app --output=json --output-path=./lighthouse-report.json

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: |
          lighthouse-report.json
          performance-report/
        retention-days: 7

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: performance-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run CodeQL analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v3

  # Build and deploy (only on main branch)
  build-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run production tests
      run: npm run test:unit
      env:
        NODE_ENV: production

    - name: Deploy to production
      run: |
        echo "Deploy to production here"
        echo "Integration with Railway, Vercel, or other deployment platform"
        # Add deployment commands here
        # Example: npx railway up --detach

    - name: Run smoke tests on production
      run: |
        echo "Run smoke tests against production URL"
        # curl -f ${{ secrets.PRODUCTION_URL }}/health
        # Add production smoke tests here

  # Test summary and notifications
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests, e2e-tests, performance-tests, security-scan]
    if: always()

    steps:
    - name: Generate test summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "✅ Unit & Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit & Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.api-tests.result }}" == "success" ]; then
          echo "✅ API Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ API Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "✅ End-to-End Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ End-to-End Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.performance-tests.result }}" == "success" ]; then
          echo "✅ Performance Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Performance Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ Security Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "Branch: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "Actor: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

    - name: Notify on failure
      if: failure()
      run: |
        echo "Test pipeline failed! Check the logs above for details."
        # Add notification integration (Slack, Teams, email, etc.)
